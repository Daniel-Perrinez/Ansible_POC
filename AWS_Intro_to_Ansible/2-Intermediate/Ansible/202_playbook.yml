---
- name: Configure Flask app
  hosts: Dev, Prod
  become: true
  remote_user: ec2-user
  gather_facts: true

  vars:
    region: us-east-1
    security_group: flask_sg

  # tasks:
    # - name: Deploy app to Dev
    # - name: Update dependencies if needed
    # - name: Test app is responsive

    # - name: If Dev deployment has passed test, then deploy to staging
    # - name: If staging passes, then Deploy app to production.

  tasks:
    - name: Update all packages
      ansible.builtin.dnf:
        name: '*'
        state: latest
        update_only: true

    - name: Install Python3, pip, and git
      ansible.builtin.dnf:
        name:
          - python3
          - python3-pip
          - git
        state: present

    - name: Install Python modules
      ansible.builtin.pip:
        name:
          - flask
          # - gunicorn
          # Nginx can’t communicate directly with Flask app.
          # It can’t execute the application. We need WSGI server to communicate between server and flask app.
        executable: pip3

    - name: Clone GitHub repository
      ansible.builtin.git:
        repo: https://github.com/Daniel-Perrinez/Ansible_POC.git
        dest: /home/ec2-user/Ansible_POC
        version: main
        clone: true
        update: true

    # - name: Install and configure Nginx
    #   block:
    #     - name: Install Nginx
    #       ansible.builtin.dnf:
    #         name: nginx
    #         state: present

    #     - name: Ensure sites-available directory exists
    #       ansible.builtin.file:
    #         path: /etc/nginx/sites-available
    #         state: directory
    #         mode: '0755'

    #     - name: Copy nginx sites-available config
    #       ansible.builtin.copy:
    #         src: config_files/flask_app_sites-available
    #         dest: /etc/nginx/sites-available/app
    #         mode: '0644'
    #         force: true

    #     - name: Copy nginx.conf
    #       ansible.builtin.copy:
    #         src: config_files/nginx.conf
    #         dest: /etc/nginx/nginx.conf
    #         mode: '0644'
    #         force: true

        # - name: Copy flaskapp.service config
        #   ansible.builtin.copy:
        #     src: config_files/flaskapp.service
        #     dest: /etc/systemd/system/flaskapp.service
        #     mode: '0644'
        #     force: true

    - name: Check if Flask process is running
      ansible.builtin.shell: |
        pgrep -f "python3 /home/ec2-user/Ansible_POC/AWS_Intro_to_Ansible/2-Intermediate/Flask_app/flask_app.py"
      register: flask_process # <- Registers the command output.
      ignore_errors: true
      changed_when: false

    - name: Display Flask status
      ansible.builtin.debug:
        msg: "Flask is {{ 'running' if flask_process.rc == 0 else 'not running' }}"


    # The "nohup" command, short for "no hang up," is meant to run processes that continue executing after the user logs out or the terminal session ends.
    - name: Start Flask app
      ansible.builtin.shell: |
        nohup python3 /home/ec2-user/Ansible_POC/AWS_Intro_to_Ansible/2-Intermediate/Flask_app/flask_app.py > /home/ec2-user/flask.log 2>&1 &
      when: flask_process.rc != 0
      changed_when: flask_process.rc != 0 # <- Uses the return code to define when the task has changed.

  # handlers:
  #   - name: Restart Nginx
  #     ansible.builtin.service:
  #       name: nginx
  #       state: restarted
